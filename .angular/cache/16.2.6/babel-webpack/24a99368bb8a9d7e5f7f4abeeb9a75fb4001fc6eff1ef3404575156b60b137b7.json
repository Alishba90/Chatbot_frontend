{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { tap } from 'rxjs/operators';\nexport let AppComponent = class AppComponent {\n  ngAfterViewInit() {\n    this.setScrollbarVisibility();\n  }\n  constructor(http, renderer, elRef) {\n    this.http = http;\n    this.renderer = renderer;\n    this.elRef = elRef;\n    this.showInitialMsg = true;\n    this.djangoUrl = 'http://127.0.0.1:8000'; // Replace with your Django backend URL\n    this.testingdjangoUrl = 'http://127.0.0.1:8000/appname/chat/'; // Replace with your Django backend URL\n    this.chatData = [{\n      query: \"\",\n      response: \"\",\n      time: \"\"\n    }\n    // Add more objects as needed\n    ];\n\n    this.inputValue = '';\n  }\n  sendQuery() {\n    if (this.inputValue.trim() !== '') {\n      if (this.showInitialMsg) {\n        this.showInitialMsg = false;\n      }\n      const date = new Date(); // Replace this line with your date string\n      const ampm = date.getHours() >= 12 ? 'PM' : 'AM';\n      let query = this.inputValue;\n      const formattedTime = date.getHours() + ':' + date.getMinutes() + ' ' + ampm;\n      this.chatData.push({\n        query: this.inputValue,\n        response: '',\n        time: formattedTime\n      });\n      this.http.post(this.testingdjangoUrl, {\n        query: this.inputValue\n      }).pipe(tap(response => {\n        // Handle the response from the backend here\n        const index = this.chatData.findIndex(item => item.query === query);\n        if (index !== -1) {\n          this.chatData[index].response = this.formatResponse(response.response);\n          query = '';\n        }\n        console.log('Response from backend:', response);\n      }, error => {\n        console.error('Error in sending the query to the backend', error);\n      })).subscribe();\n      this.inputValue = ''; // Clear the input value after sending the query\n    }\n  }\n\n  formatResponse(response) {\n    const stepsRegex = /\\d+\\.\\s/g;\n    const stepsReplaced = response.replace(stepsRegex, match => {\n      return '\\n' + match;\n    });\n    return stepsReplaced;\n  }\n  setScrollbarVisibility() {\n    const targetDiv = this.elRef.nativeElement.querySelector('#chatContainer'); // Replace 'your-div-id' with your div's ID\n    if (this.showInitialMsg) {\n      this.renderer.setStyle(targetDiv, 'overflow', 'hidden');\n    } else {\n      this.renderer.removeStyle(targetDiv, 'overflow');\n    }\n  }\n  refreshQuery() {\n    if (this.chatData.length > 0) {\n      const lastQuery = this.chatData[this.chatData.length - 1].query;\n      this.chatData[this.chatData.length - 1].response = '';\n      this.http.post(this.testingdjangoUrl, {\n        query: lastQuery\n      }).pipe(tap(response => {\n        // Handle the response from the backend here\n        const index = this.chatData.findIndex(item => item.query === lastQuery);\n        if (index !== -1) {\n          this.chatData[index].response = response.response;\n        }\n        console.log('Response from backend:', response);\n      }, error => {\n        console.error('Error in sending the query to the backend', error);\n      })).subscribe();\n    } else {\n      console.log('No queries available to refresh');\n    }\n  }\n};\n__decorate([ViewChild('scrollMe')], AppComponent.prototype, \"myScrollContainer\", void 0);\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})], AppComponent);","map":{"version":3,"names":["Component","ViewChild","tap","AppComponent","ngAfterViewInit","setScrollbarVisibility","constructor","http","renderer","elRef","showInitialMsg","djangoUrl","testingdjangoUrl","chatData","query","response","time","inputValue","sendQuery","trim","date","Date","ampm","getHours","formattedTime","getMinutes","push","post","pipe","index","findIndex","item","formatResponse","console","log","error","subscribe","stepsRegex","stepsReplaced","replace","match","targetDiv","nativeElement","querySelector","setStyle","removeStyle","refreshQuery","length","lastQuery","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\alishba.arshad\\Desktop\\Alishba\\Chatbot\\Project\\chatbot-frontend\\src\\app\\app.component.ts"],"sourcesContent":["import { Component  ,Renderer2,ElementRef,ViewChild, AfterViewChecked} from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { tap } from 'rxjs/operators';\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\n\n\nexport class AppComponent {\n  showInitialMsg: boolean = true;\n  @ViewChild('scrollMe') private myScrollContainer: ElementRef;\n  private djangoUrl = 'http://127.0.0.1:8000'; // Replace with your Django backend URL\n  private testingdjangoUrl = 'http://127.0.0.1:8000/appname/chat/'; // Replace with your Django backend URL\n  chatData = [\n    { query: \"\", response: \"\", time: \"\" },\n    \n    // Add more objects as needed\n  ];\n\n  ngAfterViewInit() {\n    this.setScrollbarVisibility();\n  }\n  constructor(private http: HttpClient,private renderer: Renderer2,private elRef: ElementRef) {}\n\n  \n\n  inputValue: string = '';\n\n  sendQuery() {\n    if (this.inputValue.trim() !== '') {\n      if(this.showInitialMsg){\n        this.showInitialMsg=false\n      }\n      const date = new Date(); // Replace this line with your date string\n      const ampm = date.getHours() >= 12 ? 'PM' : 'AM';\n      let query = this.inputValue;\n      const formattedTime = date.getHours() + ':' + date.getMinutes() + ' ' + ampm;\n      this.chatData.push({ query: this.inputValue, response: '', time: formattedTime });\n  \n      this.http.post(this.testingdjangoUrl, { query: this.inputValue }).pipe(\n        tap(\n          (response: any) => {\n            // Handle the response from the backend here\n            const index = this.chatData.findIndex(item => item.query === query);\n            if (index !== -1) {\n              this.chatData[index].response = this.formatResponse(response.response);\n              query = '';\n            }\n            console.log('Response from backend:', response);\n          },\n          (error: any) => {\n            console.error('Error in sending the query to the backend', error);\n          }\n        )\n      ).subscribe();\n      this.inputValue = ''; // Clear the input value after sending the query\n    }\n  }\n  formatResponse(response: string): string {\n    const stepsRegex = /\\d+\\.\\s/g;\n    const stepsReplaced = response.replace(stepsRegex, (match) => {\n      return '\\n' + match;\n    });\n    return stepsReplaced;\n  }\n  setScrollbarVisibility() {\n\n    const targetDiv = this.elRef.nativeElement.querySelector('#chatContainer'); // Replace 'your-div-id' with your div's ID\n    if (this.showInitialMsg) {\n      this.renderer.setStyle(targetDiv, 'overflow', 'hidden');\n    } else {\n      this.renderer.removeStyle(targetDiv, 'overflow');\n    }\n  }\n  \n  refreshQuery() {\n    if (this.chatData.length > 0) {\n      const lastQuery = this.chatData[this.chatData.length - 1].query;\n      this.chatData[this.chatData.length - 1].response='';\n      this.http.post(this.testingdjangoUrl, { query: lastQuery }).pipe(\n        tap(\n          (response: any) => {\n            // Handle the response from the backend here\n            const index = this.chatData.findIndex(item => item.query ===lastQuery );\n            if (index !== -1) {\n              this.chatData[index].response = response.response;\n              \n            }\n            console.log('Response from backend:', response);\n          },\n          (error: any) => {\n            console.error('Error in sending the query to the backend', error);\n          }\n        )\n      ).subscribe();\n    } else {\n      console.log('No queries available to refresh');\n    }\n  }\n\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}