{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let AppComponent = class AppComponent {\n  constructor(http) {\n    this.http = http;\n    this.djangoUrl = 'http://127.0.0.1:8000'; // Replace with your Django backend URL\n    this.chatData = [{\n      query: \"First Query\",\n      response: \"First Response\",\n      time: \"First Time\"\n    }, {\n      query: \"Second Query\",\n      response: \"Second Response\",\n      time: \"Second Time\"\n    }\n    // Add more objects as needed\n    ];\n\n    this.inputValue = '';\n  }\n  updateResponse(query) {\n    this.http.post(this.djangoUrl, {\n      query\n    }).subscribe(response => {\n      const index = this.chatData.findIndex(item => item.query === query);\n      if (index !== -1) {\n        this.chatData[index].response = response.response;\n      }\n    });\n  }\n  sendQuery(input) {\n    this.chatData.push({\n      query: input,\n      response: '',\n      time: new Date().toLocaleString()\n    });\n    this.inputValue = '';\n    this.http.post(this.djangoUrl, {\n      query: input\n    }).subscribe(response => {\n      // Handle the response from the backend here\n      console.log('Response from backend:', response);\n    }, error => {\n      console.error('Error in sending the query to the backend', error);\n    });\n  }\n  refreshQuery() {\n    if (this.chatData.length > 0) {\n      const lastQuery = this.chatData[this.chatData.length - 1].query;\n      this.http.post(this.djangoUrl, {\n        query: lastQuery\n      }).subscribe(response => {\n        // Handle the response from the backend here\n        console.log('Response from backend:', response);\n      }, error => {\n        console.error('Error in sending the query to the backend', error);\n      });\n    } else {\n      console.log('No queries available to refresh');\n    }\n  }\n};\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})], AppComponent);","map":{"version":3,"names":["Component","AppComponent","constructor","http","djangoUrl","chatData","query","response","time","inputValue","updateResponse","post","subscribe","index","findIndex","item","sendQuery","input","push","Date","toLocaleString","console","log","error","refreshQuery","length","lastQuery","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\alishba.arshad\\Desktop\\Alishba\\Chatbot\\Project\\chatbot-frontend\\src\\app\\app.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\n\n\nexport class AppComponent {\n\n  private djangoUrl = 'http://127.0.0.1:8000'; // Replace with your Django backend URL\n\n  chatData = [\n    { query: \"First Query\", response: \"First Response\", time: \"First Time\" },\n    { query: \"Second Query\", response: \"Second Response\", time: \"Second Time\" },\n    // Add more objects as needed\n  ];\n\n\n  constructor(private http: HttpClient) {}\n\n  updateResponse(query: string) {\n    this.http.post(this.djangoUrl, { query }).subscribe((response: any) => {\n      const index = this.chatData.findIndex(item => item.query === query);\n      if (index !== -1) {\n        this.chatData[index].response = response.response;\n        \n      }\n    });\n  }\n\n  inputValue: string = '';\n\n  sendQuery(input: string) {\n    this.chatData.push({ query: input, response: '', time: new Date().toLocaleString() });\n    this.inputValue = '';\n    this.http.post(this.djangoUrl, { query: input }).subscribe(\n      (response: any) => {\n        // Handle the response from the backend here\n        console.log('Response from backend:', response);\n      },\n      (error: any) => {\n        console.error('Error in sending the query to the backend', error);\n      }\n    );\n  }\n\n  refreshQuery() {\n    if (this.chatData.length > 0) {\n      const lastQuery = this.chatData[this.chatData.length - 1].query;\n      this.http.post(this.djangoUrl, { query: lastQuery }).subscribe(\n        (response: any) => {\n          // Handle the response from the backend here\n          console.log('Response from backend:', response);\n        },\n        (error: any) => {\n          console.error('Error in sending the query to the backend', error);\n        }\n      );\n    } else {\n      console.log('No queries available to refresh');\n    }\n  }\n}\n\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAUlC,WAAMC,YAAY,GAAlB,MAAMA,YAAY;EAWvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAThB,KAAAC,SAAS,GAAG,uBAAuB,CAAC,CAAC;IAE7C,KAAAC,QAAQ,GAAG,CACT;MAAEC,KAAK,EAAE,aAAa;MAAEC,QAAQ,EAAE,gBAAgB;MAAEC,IAAI,EAAE;IAAY,CAAE,EACxE;MAAEF,KAAK,EAAE,cAAc;MAAEC,QAAQ,EAAE,iBAAiB;MAAEC,IAAI,EAAE;IAAa;IACzE;IAAA,CACD;;IAeD,KAAAC,UAAU,GAAW,EAAE;EAZgB;EAEvCC,cAAcA,CAACJ,KAAa;IAC1B,IAAI,CAACH,IAAI,CAACQ,IAAI,CAAC,IAAI,CAACP,SAAS,EAAE;MAAEE;IAAK,CAAE,CAAC,CAACM,SAAS,CAAEL,QAAa,IAAI;MACpE,MAAMM,KAAK,GAAG,IAAI,CAACR,QAAQ,CAACS,SAAS,CAACC,IAAI,IAAIA,IAAI,CAACT,KAAK,KAAKA,KAAK,CAAC;MACnE,IAAIO,KAAK,KAAK,CAAC,CAAC,EAAE;QAChB,IAAI,CAACR,QAAQ,CAACQ,KAAK,CAAC,CAACN,QAAQ,GAAGA,QAAQ,CAACA,QAAQ;;IAGrD,CAAC,CAAC;EACJ;EAIAS,SAASA,CAACC,KAAa;IACrB,IAAI,CAACZ,QAAQ,CAACa,IAAI,CAAC;MAAEZ,KAAK,EAAEW,KAAK;MAAEV,QAAQ,EAAE,EAAE;MAAEC,IAAI,EAAE,IAAIW,IAAI,EAAE,CAACC,cAAc;IAAE,CAAE,CAAC;IACrF,IAAI,CAACX,UAAU,GAAG,EAAE;IACpB,IAAI,CAACN,IAAI,CAACQ,IAAI,CAAC,IAAI,CAACP,SAAS,EAAE;MAAEE,KAAK,EAAEW;IAAK,CAAE,CAAC,CAACL,SAAS,CACvDL,QAAa,IAAI;MAChB;MACAc,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEf,QAAQ,CAAC;IACjD,CAAC,EACAgB,KAAU,IAAI;MACbF,OAAO,CAACE,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;IACnE,CAAC,CACF;EACH;EAEAC,YAAYA,CAAA;IACV,IAAI,IAAI,CAACnB,QAAQ,CAACoB,MAAM,GAAG,CAAC,EAAE;MAC5B,MAAMC,SAAS,GAAG,IAAI,CAACrB,QAAQ,CAAC,IAAI,CAACA,QAAQ,CAACoB,MAAM,GAAG,CAAC,CAAC,CAACnB,KAAK;MAC/D,IAAI,CAACH,IAAI,CAACQ,IAAI,CAAC,IAAI,CAACP,SAAS,EAAE;QAAEE,KAAK,EAAEoB;MAAS,CAAE,CAAC,CAACd,SAAS,CAC3DL,QAAa,IAAI;QAChB;QACAc,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEf,QAAQ,CAAC;MACjD,CAAC,EACAgB,KAAU,IAAI;QACbF,OAAO,CAACE,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;MACnE,CAAC,CACF;KACF,MAAM;MACLF,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;;EAElD;CACD;AAvDYrB,YAAY,GAAA0B,UAAA,EAPxB3B,SAAS,CAAC;EACT4B,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,sBAAsB;EACnCC,SAAS,EAAE,CAAC,qBAAqB;CAClC,CAAC,C,EAGW7B,YAAY,CAuDxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}