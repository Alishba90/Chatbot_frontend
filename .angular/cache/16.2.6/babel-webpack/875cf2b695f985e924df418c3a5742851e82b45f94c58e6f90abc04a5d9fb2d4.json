{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { tap } from 'rxjs/operators';\nexport let AppComponent = class AppComponent {\n  constructor(http, renderer) {\n    this.http = http;\n    this.renderer = renderer;\n    this.showDiv1 = false;\n    this.djangoUrl = 'http://127.0.0.1:8000'; // Replace with your Django backend URL\n    this.testingdjangoUrl = 'http://127.0.0.1:8000/appname/chat/'; // Replace with your Django backend URL\n    this.chatData = [{\n      query: \"\",\n      response: \"\",\n      time: \"\"\n    }\n    // Add more objects as needed\n    ];\n\n    this.inputValue = '';\n  }\n  sendQuery() {\n    if (this.inputValue.trim() !== '') {\n      const date = new Date(); // Replace this line with your date string\n      const ampm = date.getHours() >= 12 ? 'PM' : 'AM';\n      let query = this.inputValue;\n      const formattedTime = date.getHours() + ':' + date.getMinutes() + ' ' + ampm;\n      this.chatData.push({\n        query: this.inputValue,\n        response: '',\n        time: formattedTime\n      });\n      this.http.post(this.testingdjangoUrl, {\n        query: this.inputValue\n      }).pipe(tap(response => {\n        // Handle the response from the backend here\n        const index = this.chatData.findIndex(item => item.query === query);\n        if (index !== -1) {\n          this.chatData[index].response = this.formatResponse(response.response);\n          query = '';\n        }\n        console.log('Response from backend:', response);\n      }, error => {\n        console.error('Error in sending the query to the backend', error);\n      })).subscribe();\n      this.inputValue = ''; // Clear the input value after sending the query\n    }\n  }\n\n  setScrollbarVisibility() {\n    if (this.showInitialMsg) {\n      this.renderer.setStyle(document.body, 'overflow', 'hidden');\n    } else {\n      this.renderer.removeStyle(document.body, 'overflow');\n    }\n  }\n  refreshQuery() {\n    if (this.chatData.length > 0) {\n      const lastQuery = this.chatData[this.chatData.length - 1].query;\n      this.chatData[this.chatData.length - 1].response = '';\n      this.http.post(this.testingdjangoUrl, {\n        query: lastQuery\n      }).pipe(tap(response => {\n        // Handle the response from the backend here\n        const index = this.chatData.findIndex(item => item.query === lastQuery);\n        if (index !== -1) {\n          this.chatData[index].response = response.response;\n        }\n        console.log('Response from backend:', response);\n      }, error => {\n        console.error('Error in sending the query to the backend', error);\n      })).subscribe();\n    } else {\n      console.log('No queries available to refresh');\n    }\n  }\n};\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})], AppComponent);","map":{"version":3,"names":["Component","tap","AppComponent","constructor","http","renderer","showDiv1","djangoUrl","testingdjangoUrl","chatData","query","response","time","inputValue","sendQuery","trim","date","Date","ampm","getHours","formattedTime","getMinutes","push","post","pipe","index","findIndex","item","formatResponse","console","log","error","subscribe","setScrollbarVisibility","showInitialMsg","setStyle","document","body","removeStyle","refreshQuery","length","lastQuery","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\alishba.arshad\\Desktop\\Alishba\\Chatbot\\Project\\chatbot-frontend\\src\\app\\app.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { tap } from 'rxjs/operators';\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\n\n\nexport class AppComponent {\n  showDiv1: boolean = false;\n  private djangoUrl = 'http://127.0.0.1:8000'; // Replace with your Django backend URL\n  private testingdjangoUrl = 'http://127.0.0.1:8000/appname/chat/'; // Replace with your Django backend URL\n  chatData = [\n    { query: \"\", response: \"\", time: \"\" },\n    \n    // Add more objects as needed\n  ];\n\n\n  constructor(private http: HttpClient,private renderer: Renderer2) {}\n\n  \n\n  inputValue: string = '';\n\n  sendQuery() {\n    if (this.inputValue.trim() !== '') {\n      const date = new Date(); // Replace this line with your date string\n      const ampm = date.getHours() >= 12 ? 'PM' : 'AM';\n      let query = this.inputValue;\n      const formattedTime = date.getHours() + ':' + date.getMinutes() + ' ' + ampm;\n      this.chatData.push({ query: this.inputValue, response: '', time: formattedTime });\n  \n      this.http.post(this.testingdjangoUrl, { query: this.inputValue }).pipe(\n        tap(\n          (response: any) => {\n            // Handle the response from the backend here\n            const index = this.chatData.findIndex(item => item.query === query);\n            if (index !== -1) {\n              this.chatData[index].response = this.formatResponse(response.response);\n              query = '';\n            }\n            console.log('Response from backend:', response);\n          },\n          (error: any) => {\n            console.error('Error in sending the query to the backend', error);\n          }\n        )\n      ).subscribe();\n      this.inputValue = ''; // Clear the input value after sending the query\n    }\n  }\n  \n  setScrollbarVisibility() {\n    if (this.showInitialMsg) {\n      this.renderer.setStyle(document.body, 'overflow', 'hidden');\n    } else {\n      this.renderer.removeStyle(document.body, 'overflow');\n    }\n  }\n  \n  refreshQuery() {\n    if (this.chatData.length > 0) {\n      const lastQuery = this.chatData[this.chatData.length - 1].query;\n      this.chatData[this.chatData.length - 1].response='';\n      this.http.post(this.testingdjangoUrl, { query: lastQuery }).pipe(\n        tap(\n          (response: any) => {\n            // Handle the response from the backend here\n            const index = this.chatData.findIndex(item => item.query ===lastQuery );\n            if (index !== -1) {\n              this.chatData[index].response = response.response;\n              \n            }\n            console.log('Response from backend:', response);\n          },\n          (error: any) => {\n            console.error('Error in sending the query to the backend', error);\n          }\n        )\n      ).subscribe();\n    } else {\n      console.log('No queries available to refresh');\n    }\n  }\n\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}