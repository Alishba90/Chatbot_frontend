{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let AppComponent = class AppComponent {\n  constructor(http) {\n    this.http = http;\n    this.djangoUrl = 'http://127.0.0.1:8000'; // Replace with your Django backend URL\n    this.chatData = [{\n      query: \"First Query\",\n      response: \"First Response\",\n      time: \"First Time\"\n    }, {\n      query: \"Second Query\",\n      response: \"Second Response\",\n      time: \"Second Time\"\n    }\n    // Add more objects as needed\n    ];\n\n    this.inputValue = '';\n  }\n  updateResponse(query) {\n    this.http.post(this.djangoUrl, {\n      query\n    }).subscribe(response => {\n      const index = this.chatData.findIndex(item => item.query === query);\n      if (index !== -1) {\n        this.chatData[index].response = response.response;\n      }\n    });\n  }\n  sendQuery(event) {\n    const input = event.target.value;\n    if (input.trim() !== '') {\n      this.chatData.push({\n        query: input,\n        response: '',\n        time: new Date().toLocaleString()\n      });\n      this.http.post(this.djangoUrl, {\n        query: input\n      }).subscribe(response => {\n        // Handle the response from the backend here\n        console.log('Response from backend:', response);\n      }, error => {\n        console.error('Error in sending the query to the backend', error);\n      });\n      this.inputValue = ''; // Clear the input value after sending the query\n    }\n  }\n\n  refreshQuery() {\n    if (this.chatData.length > 0) {\n      const lastQuery = this.chatData[this.chatData.length - 1].query;\n      this.http.post(this.djangoUrl, {\n        query: lastQuery\n      }).subscribe(response => {\n        // Handle the response from the backend here\n        console.log('Response from backend:', response);\n      }, error => {\n        console.error('Error in sending the query to the backend', error);\n      });\n    } else {\n      console.log('No queries available to refresh');\n    }\n  }\n};\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})], AppComponent);","map":{"version":3,"names":["Component","AppComponent","constructor","http","djangoUrl","chatData","query","response","time","inputValue","updateResponse","post","subscribe","index","findIndex","item","sendQuery","event","input","target","value","trim","push","Date","toLocaleString","console","log","error","refreshQuery","length","lastQuery","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\alishba.arshad\\Desktop\\Alishba\\Chatbot\\Project\\chatbot-frontend\\src\\app\\app.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\n\n\nexport class AppComponent {\n\n  private djangoUrl = 'http://127.0.0.1:8000'; // Replace with your Django backend URL\n\n  chatData = [\n    { query: \"First Query\", response: \"First Response\", time: \"First Time\" },\n    { query: \"Second Query\", response: \"Second Response\", time: \"Second Time\" },\n    // Add more objects as needed\n  ];\n\n\n  constructor(private http: HttpClient) {}\n\n  updateResponse(query: string) {\n    this.http.post(this.djangoUrl, { query }).subscribe((response: any) => {\n      const index = this.chatData.findIndex(item => item.query === query);\n      if (index !== -1) {\n        this.chatData[index].response = response.response;\n        \n      }\n    });\n  }\n\n  inputValue: string = '';\n\n  sendQuery(event: any) {\n    const input = (event.target as HTMLInputElement).value;\n    if (input.trim() !== '') {\n      this.chatData.push({ query: input, response: '', time: new Date().toLocaleString() });\n      this.http.post(this.djangoUrl, { query: input }).subscribe(\n        (response: any) => {\n          // Handle the response from the backend here\n          console.log('Response from backend:', response);\n        },\n        (error: any) => {\n          console.error('Error in sending the query to the backend', error);\n        }\n      );\n      this.inputValue = ''; // Clear the input value after sending the query\n    }\n  }\n  \n  \n\n  refreshQuery() {\n    if (this.chatData.length > 0) {\n      const lastQuery = this.chatData[this.chatData.length - 1].query;\n      this.http.post(this.djangoUrl, { query: lastQuery }).subscribe(\n        (response: any) => {\n          // Handle the response from the backend here\n          console.log('Response from backend:', response);\n        },\n        (error: any) => {\n          console.error('Error in sending the query to the backend', error);\n        }\n      );\n    } else {\n      console.log('No queries available to refresh');\n    }\n  }\n}\n\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAUlC,WAAMC,YAAY,GAAlB,MAAMA,YAAY;EAWvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAThB,KAAAC,SAAS,GAAG,uBAAuB,CAAC,CAAC;IAE7C,KAAAC,QAAQ,GAAG,CACT;MAAEC,KAAK,EAAE,aAAa;MAAEC,QAAQ,EAAE,gBAAgB;MAAEC,IAAI,EAAE;IAAY,CAAE,EACxE;MAAEF,KAAK,EAAE,cAAc;MAAEC,QAAQ,EAAE,iBAAiB;MAAEC,IAAI,EAAE;IAAa;IACzE;IAAA,CACD;;IAeD,KAAAC,UAAU,GAAW,EAAE;EAZgB;EAEvCC,cAAcA,CAACJ,KAAa;IAC1B,IAAI,CAACH,IAAI,CAACQ,IAAI,CAAC,IAAI,CAACP,SAAS,EAAE;MAAEE;IAAK,CAAE,CAAC,CAACM,SAAS,CAAEL,QAAa,IAAI;MACpE,MAAMM,KAAK,GAAG,IAAI,CAACR,QAAQ,CAACS,SAAS,CAACC,IAAI,IAAIA,IAAI,CAACT,KAAK,KAAKA,KAAK,CAAC;MACnE,IAAIO,KAAK,KAAK,CAAC,CAAC,EAAE;QAChB,IAAI,CAACR,QAAQ,CAACQ,KAAK,CAAC,CAACN,QAAQ,GAAGA,QAAQ,CAACA,QAAQ;;IAGrD,CAAC,CAAC;EACJ;EAIAS,SAASA,CAACC,KAAU;IAClB,MAAMC,KAAK,GAAID,KAAK,CAACE,MAA2B,CAACC,KAAK;IACtD,IAAIF,KAAK,CAACG,IAAI,EAAE,KAAK,EAAE,EAAE;MACvB,IAAI,CAAChB,QAAQ,CAACiB,IAAI,CAAC;QAAEhB,KAAK,EAAEY,KAAK;QAAEX,QAAQ,EAAE,EAAE;QAAEC,IAAI,EAAE,IAAIe,IAAI,EAAE,CAACC,cAAc;MAAE,CAAE,CAAC;MACrF,IAAI,CAACrB,IAAI,CAACQ,IAAI,CAAC,IAAI,CAACP,SAAS,EAAE;QAAEE,KAAK,EAAEY;MAAK,CAAE,CAAC,CAACN,SAAS,CACvDL,QAAa,IAAI;QAChB;QACAkB,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEnB,QAAQ,CAAC;MACjD,CAAC,EACAoB,KAAU,IAAI;QACbF,OAAO,CAACE,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;MACnE,CAAC,CACF;MACD,IAAI,CAAClB,UAAU,GAAG,EAAE,CAAC,CAAC;;EAE1B;;EAIAmB,YAAYA,CAAA;IACV,IAAI,IAAI,CAACvB,QAAQ,CAACwB,MAAM,GAAG,CAAC,EAAE;MAC5B,MAAMC,SAAS,GAAG,IAAI,CAACzB,QAAQ,CAAC,IAAI,CAACA,QAAQ,CAACwB,MAAM,GAAG,CAAC,CAAC,CAACvB,KAAK;MAC/D,IAAI,CAACH,IAAI,CAACQ,IAAI,CAAC,IAAI,CAACP,SAAS,EAAE;QAAEE,KAAK,EAAEwB;MAAS,CAAE,CAAC,CAAClB,SAAS,CAC3DL,QAAa,IAAI;QAChB;QACAkB,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEnB,QAAQ,CAAC;MACjD,CAAC,EACAoB,KAAU,IAAI;QACbF,OAAO,CAACE,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;MACnE,CAAC,CACF;KACF,MAAM;MACLF,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;;EAElD;CACD;AA5DYzB,YAAY,GAAA8B,UAAA,EAPxB/B,SAAS,CAAC;EACTgC,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,sBAAsB;EACnCC,SAAS,EAAE,CAAC,qBAAqB;CAClC,CAAC,C,EAGWjC,YAAY,CA4DxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}